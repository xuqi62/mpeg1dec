#include "stdafx.h"

#include "vlc.h"
#include <stdio.h>
#include "log.h"
typedef unsigned char uint8;

unsigned char mpeg2_intra_q[64] =
{
    8, 16, 19, 22, 26, 27, 29, 34,
    16, 16, 22, 24, 27, 29, 34, 37,
    19, 22, 26, 27, 29, 34, 34, 38,
    22, 22, 26, 27, 29, 34, 37, 40,
    22, 26, 27, 29, 32, 35, 40, 48,
    26, 27, 29, 32, 35, 40, 48, 58,
    26, 27, 29, 34, 38, 46, 56, 69,
    27, 29, 35, 38, 46, 56, 69, 83
};

unsigned char mpeg2_inter_q[64] =
{
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
};

unsigned char non_linear_mquant_table[32] =
{
    0, 1, 2, 3, 4, 5, 6, 7,
    8,10,12,14,16,18,20,22,
    24,28,32,36,40,44,48,52,
    56,64,72,80,88,96,104,112
};

unsigned char ff_zigzag_direct[64] = {
    0,   1,  8, 16,  9,  2,  3, 10,
    17, 24, 32, 25, 18, 11,  4,  5,
    12, 19, 26, 33, 40, 48, 41, 34,
    27, 20, 13,  6,  7, 14, 21, 28,
    35, 42, 49, 56, 57, 50, 43, 36,
    29, 22, 15, 23, 30, 37, 44, 51,
    58, 59, 52, 45, 38, 31, 39, 46,
    53, 60, 61, 54, 47, 55, 62, 63
};

unsigned char ff_alternate_horizontal_scan[64] = {
    0,  1,   2,  3,  8,  9, 16, 17,
    10, 11,  4,  5,  6,  7, 15, 14,
    13, 12, 19, 18, 24, 25, 32, 33,
    26, 27, 20, 21, 22, 23, 28, 29,
    30, 31, 34, 35, 40, 41, 48, 49,
    42, 43, 36, 37, 38, 39, 44, 45,
    46, 47, 50, 51, 56, 57, 58, 59,
    52, 53, 54, 55, 60, 61, 62, 63,
};

unsigned char ff_alternate_vertical_scan[64] = {
    0,  8,  16, 24,  1,  9,  2, 10,
    17, 25, 32, 40, 48, 56, 57, 49,
    41, 33, 26, 18,  3, 11,  4, 12,
    19, 27, 34, 42, 50, 58, 35, 43,
    51, 59, 20, 28,  5, 13,  6, 14,
    21, 29, 36, 44, 52, 60, 37, 45,
    53, 61, 22, 30,  7, 15, 23, 31,
    38, 46, 54, 62, 39, 47, 55, 63,
};

//vld tables
char zigzag_direct[2][64] =
{
    { // Zig-Zag scan pattern
        0,	 1,	 8,	16,	 9,	 2,	 3,	10,
        17,	24,	32,	25,	18,	11,	 4,	 5,
        12,	19,	26,	33,	40,	48,	41,	34,
        27,	20,	13,	 6,	 7,	14,	21,	28,
        35,	42,	49,	56,	57,	50,	43,	36,
        29,	22,	15,	23,	30,	37,	44,	51,
        58,	59,	52,	45,	38,	31,	39,	46,
        53,	60,	61,	54,	47,	55,	62,	63
    },
    { // Alternate scan pattern
        0,	 8,	16,	24,	 1,	 9,	 2,	10,
        17,	25,	32,	40,	48,	56,	57,	49,
        41,	33,	26,	18,	 3,	11,	 4,	12,
        19,	27,	34,	42,	50,	58,	35,	43,
        51,	59,	20,	28,	 5,	13,	6,	14,
        21,	29,	36,	44,	52,	60,	37,	45,
        53,	61,	22,	30,	 7,	15,	23,	31,
        38,	46,	54,	62,	39,	47,	55,	63
    }
};

unsigned char q_scale[2][32] =
{
    {
        0,	 2,	 4,	 6,	 8,	10,	12,	14,
        16,	18,	20,	22,	24,	26,	28,	30,
        32,	34,	36,	38,	40,	42,	44,	46,
        48,	50,	52,	54,	56,	58,	60,	62
    },
    {
        0,	 1,	 2,	 3,	 4,	 5,	 6,	 7,
        8,	10,	12,	14,	16,	18,	20,	22,
        24,	28,	32,	36,	40,	44,	48,	52,
        56,	64,	72,	80,	88,	96,104,112
    }
};


// dc luma table
const uint16_t ff_mpeg12_vlc_dc_lum_code[12] = {
    0x4, 0x0, 0x1, 0x5, 0x6, 0xe, 0x1e, 0x3e, 0x7e, 0xfe, 0x1fe, 0x1ff,
};
const unsigned char ff_mpeg12_vlc_dc_lum_bits[12] = {
    3, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9,
};


unsigned long DCTtabfirst[32] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00020005,	0x00020105,	0x02010005,	0x02010105,
    0x01010004,	0x01010004,	0x01010104,	0x01010104,
    0x00010002,	0x00010002,	0x00010002,	0x00010002,
    0x00010002,	0x00010002,	0x00010002,	0x00010002,
    0x00010102,	0x00010102,	0x00010102,	0x00010102,
    0x00010102,	0x00010102,	0x00010102,	0x00010102
};

unsigned long DCTtabnext[32] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00020005,	0x00020105,	0x02010005,	0x02010105,
    0x01010004,	0x01010004,	0x01010104,	0x01010104,
    0x40000002,	0x40000002,	0x40000002,	0x40000002,
    0x40000002,	0x40000002,	0x40000002,	0x40000002,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010103,	0x00010103,	0x00010103,	0x00010103
};

unsigned long DCTtab0[128] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x41000006,	0x41000006,	0x41000006,	0x41000006,
    0x41000006,	0x41000006,	0x41000006,	0x41000006,
    0x02020008,	0x02020008,	0x02020108,	0x02020108,
    0x09010008,	0x09010008,	0x09010108,	0x09010108,
    0x00040008,	0x00040008,	0x00040108,	0x00040108,
    0x08010008,	0x08010008,	0x08010108,	0x08010108,
    0x07010007,	0x07010007,	0x07010007,	0x07010007,
    0x07010107,	0x07010107,	0x07010107,	0x07010107,
    0x06010007,	0x06010007,	0x06010007,	0x06010007,
    0x06010107,	0x06010107,	0x06010107,	0x06010107,
    0x01020007,	0x01020007,	0x01020007,	0x01020007,
    0x01020107,	0x01020107,	0x01020107,	0x01020107,
    0x05010007,	0x05010007,	0x05010007,	0x05010007,
    0x05010107,	0x05010107,	0x05010107,	0x05010107,
    0x0D010009,	0x0D010109,	0x00060009,	0x00060109,
    0x0C010009,	0x0C010109,	0x0B010009,	0x0B010109,
    0x03020009,	0x03020109,	0x01030009,	0x01030109,
    0x00050009,	0x00050109,	0x0A010009,	0x0A010109,
    0x00030006,	0x00030006,	0x00030006,	0x00030006,
    0x00030006,	0x00030006,	0x00030006,	0x00030006,
    0x00030106,	0x00030106,	0x00030106,	0x00030106,
    0x00030106,	0x00030106,	0x00030106,	0x00030106,
    0x04010006,	0x04010006,	0x04010006,	0x04010006,
    0x04010006,	0x04010006,	0x04010006,	0x04010006,
    0x04010106,	0x04010106,	0x04010106,	0x04010106,
    0x04010106,	0x04010106,	0x04010106,	0x04010106,
    0x03010006,	0x03010006,	0x03010006,	0x03010006,
    0x03010006,	0x03010006,	0x03010006,	0x03010006,
    0x03010106,	0x03010106,	0x03010106,	0x03010106,
    0x03010106,	0x03010106,	0x03010106,	0x03010106
};

unsigned long DCTtab0a[512] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x41000006,	0x41000006,	0x41000006,	0x41000006,
    0x41000006,	0x41000006,	0x41000006,	0x41000006,
    0x07010008,	0x07010008,	0x07010108,	0x07010108,
    0x08010008,	0x08010008,	0x08010108,	0x08010108,
    0x06010008,	0x06010008,	0x06010108,	0x06010108,
    0x02020008,	0x02020008,	0x02020108,	0x02020108,
    0x00070007,	0x00070007,	0x00070007,	0x00070007,
    0x00070107,	0x00070107,	0x00070107,	0x00070107,
    0x00060007,	0x00060007,	0x00060007,	0x00060007,
    0x00060107,	0x00060107,	0x00060107,	0x00060107,
    0x04010007,	0x04010007,	0x04010007,	0x04010007,
    0x04010107,	0x04010107,	0x04010107,	0x04010107,
    0x05010007,	0x05010007,	0x05010007,	0x05010007,
    0x05010107,	0x05010107,	0x05010107,	0x05010107,
    0x01050009,	0x01050109,	0x0B010009,	0x0B010109,
    0x000B0009,	0x000B0109,	0x000A0009,	0x000A0109,
    0x0D010009,	0x0D010109,	0x0C010009,	0x0C010109,
    0x03020009,	0x03020109,	0x01040009,	0x01040109,
    0x02010006,	0x02010006,	0x02010006,	0x02010006,
    0x02010006,	0x02010006,	0x02010006,	0x02010006,
    0x02010106,	0x02010106,	0x02010106,	0x02010106,
    0x02010106,	0x02010106,	0x02010106,	0x02010106,
    0x01020006,	0x01020006,	0x01020006,	0x01020006,
    0x01020006,	0x01020006,	0x01020006,	0x01020006,
    0x01020106,	0x01020106,	0x01020106,	0x01020106,
    0x01020106,	0x01020106,	0x01020106,	0x01020106,
    0x03010006,	0x03010006,	0x03010006,	0x03010006,
    0x03010006,	0x03010006,	0x03010006,	0x03010006,
    0x03010106,	0x03010106,	0x03010106,	0x03010106,
    0x03010106,	0x03010106,	0x03010106,	0x03010106,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010004,	0x01010004,	0x01010004,	0x01010004,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x01010104,	0x01010104,	0x01010104,	0x01010104,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x40000004,	0x40000004,	0x40000004,	0x40000004,
    0x00030005,	0x00030005,	0x00030005,	0x00030005,
    0x00030005,	0x00030005,	0x00030005,	0x00030005,
    0x00030005,	0x00030005,	0x00030005,	0x00030005,
    0x00030005,	0x00030005,	0x00030005,	0x00030005,
    0x00030105,	0x00030105,	0x00030105,	0x00030105,
    0x00030105,	0x00030105,	0x00030105,	0x00030105,
    0x00030105,	0x00030105,	0x00030105,	0x00030105,
    0x00030105,	0x00030105,	0x00030105,	0x00030105,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010003,	0x00010003,	0x00010003,	0x00010003,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00010103,	0x00010103,	0x00010103,	0x00010103,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020004,	0x00020004,	0x00020004,	0x00020004,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00020104,	0x00020104,	0x00020104,	0x00020104,
    0x00040006,	0x00040006,	0x00040006,	0x00040006,
    0x00040006,	0x00040006,	0x00040006,	0x00040006,
    0x00040106,	0x00040106,	0x00040106,	0x00040106,
    0x00040106,	0x00040106,	0x00040106,	0x00040106,
    0x00050006,	0x00050006,	0x00050006,	0x00050006,
    0x00050006,	0x00050006,	0x00050006,	0x00050006,
    0x00050106,	0x00050106,	0x00050106,	0x00050106,
    0x00050106,	0x00050106,	0x00050106,	0x00050106,
    0x09010008,	0x09010008,	0x09010108,	0x09010108,
    0x01030008,	0x01030008,	0x01030108,	0x01030108,
    0x0A010008,	0x0A010008,	0x0A010108,	0x0A010108,
    0x00080008,	0x00080008,	0x00080108,	0x00080108,
    0x00090008,	0x00090008,	0x00090108,	0x00090108,
    0x000C0009,	0x000C0109,	0x000D0009,	0x000D0109,
    0x02030009,	0x02030109,	0x04020009,	0x04020109,
    0x000E0009,	0x000E0109,	0x000F0009,	0x000F0109
};

unsigned long DCTtab1[32] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x1001000B,	0x1001010B,	0x0502000B,	0x0502010B,
    0x0007000B,	0x0007010B,	0x0203000B,	0x0203010B,
    0x0104000B,	0x0104010B,	0x0F01000B,	0x0F01010B,
    0x0E01000B,	0x0E01010B,	0x0402000B,	0x0402010B
};

unsigned long DCTtab1a[32] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x0502000A,	0x0502000A,	0x0502010A,	0x0502010A,
    0x0E01000A,	0x0E01000A,	0x0E01010A,	0x0E01010A,
    0x0204000B,	0x0204010B,	0x1001000B,	0x1001010B,
    0x0F01000A,	0x0F01000A,	0x0F01010A,	0x0F01010A
};

unsigned long DCTtab2[64] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x000B000D,	0x000B010D,	0x0802000D,	0x0802010D,
    0x0403000D,	0x0403010D,	0x000A000D,	0x000A010D,
    0x0204000D,	0x0204010D,	0x0702000D,	0x0702010D,
    0x1501000D,	0x1501010D,	0x1401000D,	0x1401010D,
    0x0009000D,	0x0009010D,	0x1301000D,	0x1301010D,
    0x1201000D,	0x1201010D,	0x0105000D,	0x0105010D,
    0x0303000D,	0x0303010D,	0x0008000D,	0x0008010D,
    0x0602000D,	0x0602010D,	0x1101000D,	0x1101010D
};

unsigned long DCTtab3[64] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x0A02000E,	0x0A02010E,	0x0902000E,	0x0902010E,
    0x0503000E,	0x0503010E,	0x0304000E,	0x0304010E,
    0x0205000E,	0x0205010E,	0x0107000E,	0x0107010E,
    0x0106000E,	0x0106010E,	0x000F000E,	0x000F010E,
    0x000E000E,	0x000E010E,	0x000D000E,	0x000D010E,
    0x000C000E,	0x000C010E,	0x1A01000E,	0x1A01010E,
    0x1901000E,	0x1901010E,	0x1801000E,	0x1801010E,
    0x1701000E,	0x1701010E,	0x1601000E,	0x1601010E
};

unsigned long DCTtab4[64] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x001F000F,	0x001F010F,	0x001E000F,	0x001E010F,
    0x001D000F,	0x001D010F,	0x001C000F,	0x001C010F,
    0x001B000F,	0x001B010F,	0x001A000F,	0x001A010F,
    0x0019000F,	0x0019010F,	0x0018000F,	0x0018010F,
    0x0017000F,	0x0017010F,	0x0016000F,	0x0016010F,
    0x0015000F,	0x0015010F,	0x0014000F,	0x0014010F,
    0x0013000F,	0x0013010F,	0x0012000F,	0x0012010F,
    0x0011000F,	0x0011010F,	0x0010000F,	0x0010010F
};

unsigned long DCTtab5[64] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00280010,	0x00280110,	0x00270010,	0x00270110,
    0x00260010,	0x00260110,	0x00250010,	0x00250110,
    0x00240010,	0x00240110,	0x00230010,	0x00230110,
    0x00220010,	0x00220110,	0x00210010,	0x00210110,
    0x00200010,	0x00200110,	0x010E0010,	0x010E0110,
    0x010D0010,	0x010D0110,	0x010C0010,	0x010C0110,
    0x010B0010,	0x010B0110,	0x010A0010,	0x010A0110,
    0x01090010,	0x01090110,	0x01080010,	0x01080110
};

unsigned long DCTtab6[64] =
{
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x00000000,	0x00000000,	0x00000000,	0x00000000,
    0x01120011,	0x01120111,	0x01110011,	0x01110111,
    0x01100011,	0x01100111,	0x010F0011,	0x010F0111,
    0x06030011,	0x06030111,	0x10020011,	0x10020111,
    0x0F020011,	0x0F020111,	0x0E020011,	0x0E020111,
    0x0D020011,	0x0D020111,	0x0C020011,	0x0C020111,
    0x0B020011,	0x0B020111,	0x1F010011,	0x1F010111,
    0x1E010011,	0x1E010111,	0x1D010011,	0x1D010111,
    0x1C010011,	0x1C010111,	0x1B010011,	0x1B010111
};

struct VLC1 mait[34] = //macroblock_address_increment_table
{
    { 1,1,1 },{ 3,3,2 },{ 3,2,3 },{ 4,3,4 },
    { 4,2,5 },{ 5,3,6 },{ 5,2,7 },{ 7,7,8 },
    { 7,6,9 },{ 8,11,10 },{ 8,10,11 },{ 8,9,12 },
    { 8,8,13 },{ 8,7,14 },{ 8,6,15 },{ 10,23,16 },
    { 10,22,17 },{ 10,21,18 },{ 10,20,19 },{ 10,19,20 },
    { 10,18,21 },{ 11,35,22 },{ 11,34,23 },{ 11,33,24 },
    { 11,32,25 },{ 11,31,26 },{ 11,30,27 },{ 11,29,28 },
    { 11,28,29 },{ 11,27,30 },{ 11,26,31 },{ 11,25,32 },
    { 11,24,33 },{ 11,8,33 }
};

struct VLC1 mtpt[7] = //macroblock_type_p_table
{
    { 1,1,10 },{ 2,1,8 },{ 3,1,2 },{ 5,3,16 },
    { 5,2,11 },{ 5,1,9 },{ 6,1,17 }
};

struct VLC1 mtbt[11] = //macroblock_type_b_table
{
    { 2,2,6 },{ 2,3,14 },{ 3,2,4 },{ 3,3,12 },
    { 4,2,2 },{ 4,3,10 },{ 5,3,16 },{ 5,2,15 },
    { 6,3,11 },{ 6,2,13 },{ 6,1,17 }
};

struct VLC1 cbpt[64] = //coded_block_pattern_table
{
    { 3,7,60 },{ 4,13,4 },{ 4,12,8 },{ 4,11,16 },
    { 4,10,32 },{ 5,19,12 },{ 5,18,48 },{ 5,17,20 },
    { 5,16,40 },{ 5,15,28 },{ 5,14,44 },{ 5,13,52 },
    { 5,12,56 },{ 5,11,1 },{ 5,10,61 },{ 5,9,2 },
    { 5,8,62 },{ 6,15,24 },{ 6,14,36 },{ 6,13,3 },
    { 6,12,63 },{ 7,23,5 },{ 7,22,9 },{ 7,21,17 },
    { 7,20,33 },{ 7,19,6 },{ 7,18,10 },{ 7,17,18 },
    { 7,16,34 },{ 8,31,7 },{ 8,30,11 },{ 8,29,19 },
    { 8,28,35 },{ 8,27,13 },{ 8,26,49 },{ 8,25,21 },
    { 8,24,41 },{ 8,23,14 },{ 8,22,50 },{ 8,21,22 },
    { 8,20,42 },{ 8,19,15 },{ 8,18,51 },{ 8,17,23 },
    { 8,16,43 },{ 8,15,25 },{ 8,14,37 },{ 8,13,26 },
    { 8,12,38 },{ 8,11,29 },{ 8,10,45 },{ 8,9,53 },
    { 8,8,57 },{ 8,7,30 },{ 8,6,46 },{ 8,5,54 },
    { 8,4,58 },{ 9,7,31 },{ 9,6,47 },{ 9,5,55 },
    { 9,4,59 },{ 9,3,27 },{ 9,2,39 },{ 9,1,0 }
};

struct VLC1 mct[33] = //motion_code_table
{
    { 11,25,-16 },{ 11,27,-15 },{ 11,29,-14 },{ 11,31,-13 },
    { 11,33,-12 },{ 11,35,-11 },{ 10,19,-10 },{ 10,21,-9 },
    { 10,23,-8 },{ 8,7,-7 },{ 8,9,-6 },{ 8,11,-5 },
    { 7,7,-4 },{ 5,3,-3 },{ 4,3,-2 },{ 3,3,-1 },
    { 1,1,0 },{ 3,2,1 },{ 4,2,2 },{ 5,2,3 },
    { 7,6,4 },{ 8,10,5 },{ 8,8,6 },{ 8,6,7 },
    { 10,22,8 },{ 10,20,9 },{ 10,18,10 },{ 11,34,11 },
    { 11,32,12 },{ 11,30,13 },{ 11,28,14 },{ 11,26,15 },
    { 11,24,16 }
};

struct VLC1 ddslt[12] = //dct_dc_size_luminance_table
{
    { 3,4,0 },{ 2,0,1 },{ 2,1,2 },{ 3,5,3 },
    { 3,6,4, },{ 4,14,5 },{ 5,30,6 },{ 6,62,7 },
    { 7,126,8 },{ 8,254,9 },{ 9,510,10 },{ 9,511,11 }
};

struct VLC1 ddsct[12] = //dct_dc_size_chrominance_table
{
    { 2,0,0 },{ 2,1,1 },{ 2,2,2 },{ 3,6,3 },
    { 4,14,4 },{ 5,30,5 },{ 6,62,6 },{ 7,126,7 },
    { 8,254,8 },{ 9,510,9 },{ 10,1022,10 },{ 10,1023,11 }
};

struct VLC2 dct_tab14[114] = //B_14_DCT_table
{
    { 2,2,64,0 },{ 2,3,0,1 },{ 3,3,1,1 },{ 4,4,0,2 },
    { 4,5,2,1 },{ 5,5,0,3 },{ 5,7,3,1 },{ 5,6,4,1 },
    { 6,6,1,2 },{ 6,7,5,1 },{ 6,5,6,1 },{ 6,4,7,1 },
    { 7,6,0,4 },{ 7,4,2,2 },{ 7,7,8,1 },{ 7,5,9,1 },
    { 6,1,65,0 },{ 8,38,0,5 },{ 8,33,0,6 },{ 8,37,1,3 },
    { 8,36,3,2 },{ 8,39,10,1 },{ 8,35,11,1 },{ 8,34,12,1 },
    { 8,32,13,1 },{ 10,10,0,7 },{ 10,12,1,4 },{ 10,11,2,3 },
    { 10,15,4,2 },{ 10,9,5,2 },{ 10,14,14,1 },{ 10,13,15,1 },
    { 10,8,16,1 },{ 12,29,0,8 },{ 12,24,0,9 },{ 12,19,0,10 },
    { 12,16,0,11 },{ 12,27,1,5 },{ 12,20,2,4 },{ 12,28,3,3 },
    { 12,18,4,3 },{ 12,30,6,2 },{ 12,21,7,2 },{ 12,17,8,2 },
    { 12,31,17,1 },{ 12,26,18,1 },{ 12,25,19,1 },{ 12,23,20,1 },
    { 12,22,21,1 },{ 13,26,0,12 },{ 13,25,0,13 },{ 13,24,0,14 },
    { 13,23,0,15 },{ 13,22,1,6 },{ 13,21,1,7 },{ 13,20,2,5 },
    { 13,19,3,4 },{ 13,18,5,3 },{ 13,17,9,2 },{ 13,16,10,2 },
    { 13,31,22,1 },{ 13,30,23,1 },{ 13,29,24,1 },{ 13,28,25,1 },
    { 13,27,26,1 },{ 14,31,0,16 },{ 14,30,0,17 },{ 14,29,0,18 },
    { 14,28,0,19 },{ 14,27,0,20 },{ 14,26,0,21 },{ 14,25,0,22 },
    { 14,24,0,23 },{ 14,23,0,24 },{ 14,22,0,25 },{ 14,21,0,26 },
    { 14,20,0,27 },{ 14,19,0,28 },{ 14,18,0,29 },{ 14,17,0,30 },
    { 14,16,0,31 },{ 15,24,0,32 },{ 15,23,0,33 },{ 15,22,0,34 },
    { 15,21,0,35 },{ 15,20,0,36 },{ 15,19,0,37 },{ 15,18,0,38 },
    { 15,17,0,39 },{ 15,16,0,40 },{ 15,31,1,8 },{ 15,30,1,9 },
    { 15,29,1,10 },{ 15,28,1,11 },{ 15,27,1,12 },{ 15,26,1,13 },
    { 15,25,1,14 },{ 16,19,1,15 },{ 16,18,1,16 },{ 16,17,1,17 },
    { 16,16,1,18 },{ 16,20,6,3 },{ 16,26,11,2 },{ 16,25,12,2 },
    { 16,24,13,2 },{ 16,23,14,2 },{ 16,22,15,2 },{ 16,21,16,2 },
    { 16,31,27,2 },{ 16,30,28,1 },{ 16,29,29,1 },{ 16,28,30,1 },
    { 16,27,31,1 },{ 0,0,0,0 }
};

struct VLC2 dct_tab15[114] = //B_15_DCT_table
{
    { 4,6,64,0 },{ 2,2,0,1 },{ 3,2,1,1 },{ 3,6,0,2 },
    { 5,5,2,1 },{ 4,7,0,3 },{ 5,7,3,1 },{ 6,6,4,1 },
    { 5,6,1,2 },{ 6,7,5,1 },{ 7,6,6,1 },{ 7,4,7,1 },
    { 5,28,0,4 },{ 7,7,2,2 },{ 7,5,8,1 },{ 7,120,9,1 },
    { 6,1,65,0 },{ 5,29,0,5 },{ 6,5,0,6 },{ 7,121,1,3 },
    { 8,38,3,2 },{ 7,122,10,1 },{ 8,33,11,1 },{ 8,37,12,1 },
    { 8,36,13,1 },{ 6,4,0,7 },{ 8,39,1,4 },{ 8,252,2,3 },
    { 8,253,4,2 },{ 9,4,5,2 },{ 9,5,14,1 },{ 9,7,15,1 },
    { 10,13,16,1 },{ 7,123,0,8 },{ 7,124,0,9 },{ 8,35,0,10 },
    { 8,34,0,11 },{ 8,32,1,5 },{ 10,12,2,4 },{ 12,28,3,3 },
    { 12,18,4,3 },{ 12,30,6,2 },{ 12,21,7,2 },{ 12,17,8,2 },

    { 12,31,17,1 },{ 12,26,18,1 },{ 12,25,19,1 },{ 12,23,20,1 },
    { 12,22,21,1 },{ 8,250,0,12 },{ 8,251,0,13 },{ 8,254,0,14 },
    { 8,255,0,15 },{ 13,22,1,6 },{ 13,21,1,7 },{ 13,20,2,5 },
    { 13,19,3,4 },{ 13,18,5,3 },{ 13,17,9,2 },{ 13,16,10,2 },
    { 13,31,22,1 },{ 13,30,23,1 },{ 13,29,24,1 },{ 13,28,25,1 },

    { 13,27,26,1 },{ 14,31,0,16 },{ 14,30,0,17 },{ 14,29,0,18 },
    { 14,28,0,19 },{ 14,27,0,20 },{ 14,26,0,21 },{ 14,25,0,22 },
    { 14,24,0,23 },{ 14,23,0,24 },{ 14,22,0,25 },{ 14,21,0,26 },
    { 14,20,0,27 },{ 14,19,0,28 },{ 14,18,0,29 },{ 14,17,0,30 },
    { 14,16,0,31 },{ 15,24,0,32 },{ 15,23,0,33 },{ 15,22,0,34 },
    { 15,21,0,35 },{ 15,20,0,36 },{ 15,19,0,37 },{ 15,18,0,38 },
    { 15,17,0,39 },{ 15,16,0,40 },{ 15,31,1,8 },{ 15,30,1,9 },
    { 15,29,1,10 },{ 15,28,1,11 },{ 15,27,1,12 },{ 15,26,1,13 },

    { 15,25,1,14 },{ 16,19,1,15 },{ 16,18,1,16 },{ 16,17,1,17 },
    { 16,16,1,18 },{ 16,20,6,3 },{ 16,26,11,2 },{ 16,25,12,2 },
    { 16,24,13,2 },{ 16,23,14,2 },{ 16,22,15,2 },{ 16,21,16,2 },
    { 16,31,27,1 },{ 16,30,28,1 },{ 16,29,29,1 },{ 16,28,30,1 },
    { 16,27,31,1 },{ 0,0,0,0 }
};

struct vlc_tab1 dct_dc_size_luminance_table[512];
struct vlc_tab1 dct_dc_size_chrominance_table[1024];
struct vlc_tab1 motion_code_table[2048];
struct vlc_tab1 macroblock_address_increment_table[2048];
struct vlc_tab1 coded_block_pattern_table[512];
struct vlc_tab1 macroblock_type_p_table[64];
struct vlc_tab1 macroblock_type_b_table[64];


void init_vlcs()
{
    int i, j;
    unsigned int code_start, code_end;

    memset(macroblock_address_increment_table, 0, 2048 * sizeof(vlc_tab1));
    for (int i = 0; i < 34; i++)
    {
        code_start = mait[i].code << (11 - mait[i].len);
        code_end = code_start | (0xfff >> (12 - (11 - mait[i].len)));
        logd("macroblock_address_increment_table, i: %d, code_start: %d, code_end: %d", i, code_start, code_end);
        for (j = code_start; j <= code_end; j++)
        {
            macroblock_address_increment_table[j].len = mait[i].len;
            macroblock_address_increment_table[j].value = mait[i].value;
        }
    }

    memset(macroblock_type_p_table, 0, 64 * sizeof(struct vlc_tab1));
    for (i = 0; i<7; i++)
    {
        code_start = mtpt[i].code << (6 - mtpt[i].len);
        code_end = code_start | (0xff >> (8 - (6 - mtpt[i].len)));
        for (j = code_start; j <= code_end; j++)
        {
            macroblock_type_p_table[j].len = mtpt[i].len;
            macroblock_type_p_table[j].value = mtpt[i].value;
        }
    }

    memset(macroblock_type_b_table, 0, 64 * sizeof(struct vlc_tab1));
    for (i = 0; i<11; i++)
    {
        code_start = mtbt[i].code << (6 - mtbt[i].len);
        code_end = code_start | (0xff >> (8 - (6 - mtbt[i].len)));
        for (j = code_start; j <= code_end; j++)
        {
            macroblock_type_b_table[j].len = mtbt[i].len;
            macroblock_type_b_table[j].value = mtbt[i].value;
        }
    }

    memset(coded_block_pattern_table, 0, 512 * sizeof(struct vlc_tab1));
    for (i = 0; i<64; i++)
    {
        code_start = cbpt[i].code << (9 - cbpt[i].len);
        code_end = code_start | (0xfff >> (12 - (9 - cbpt[i].len)));
        for (j = code_start; j <= code_end; j++)
        {
            coded_block_pattern_table[j].len = cbpt[i].len;
            coded_block_pattern_table[j].value = cbpt[i].value;
        }
    }

    memset(motion_code_table, 0, 2048 * sizeof(struct vlc_tab1));
    for (i = 0; i<33; i++)
    {
        code_start = mct[i].code << (11 - mct[i].len);
        code_end = code_start | (0xfff >> (12 - (11 - mct[i].len)));
        for (j = code_start; j <= code_end; j++)
        {
            motion_code_table[j].len = mct[i].len;
            motion_code_table[j].value = mct[i].value;
        }
    }

    memset(dct_dc_size_luminance_table, 0, 512 * sizeof(struct vlc_tab1));
    memset(dct_dc_size_chrominance_table, 0, 1024 * sizeof(struct vlc_tab1));
    for (i = 0; i<12; i++)
    {
        code_start = ddslt[i].code << (9 - ddslt[i].len);
        code_end = code_start | (0xfff >> (12 - (9 - ddslt[i].len)));
        for (j = code_start; j <= code_end; j++)
        {
            dct_dc_size_luminance_table[j].len = ddslt[i].len;
            dct_dc_size_luminance_table[j].value = ddslt[i].value;
        }
    }
    for (i = 0; i<12; i++)
    {
        code_start = ddsct[i].code << (10 - ddsct[i].len);
        code_end = code_start | (0xfff >> (12 - (10 - ddsct[i].len)));
        for (j = code_start; j <= code_end; j++)
        {
            dct_dc_size_chrominance_table[j].len = ddsct[i].len;
            dct_dc_size_chrominance_table[j].value = ddsct[i].value;
        }
    }
}